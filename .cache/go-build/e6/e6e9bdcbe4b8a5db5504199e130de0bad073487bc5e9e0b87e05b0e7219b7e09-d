// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/madhatter/Git/yay/src/gopath/pkg/mod/github.com/!jguer/go-alpm/v2@v2.2.2/deps.go:1:1
package alpm

/*
#include <alpm.h>
*/
import _ "unsafe"

import (
	"fmt"
	"unsafe"
)

// FindSatisfier searches a DBList for a package that satisfies depstring
// Example "glibc>=2.12"
func (l DBList) FindSatisfier(depstring string) (IPackage, error) {
	cDepString := ( /*line :16:16*/_Cfunc_CString /*line :16:24*/)(depstring)

	defer func() func() { _cgo0 := /*line :18:15*/unsafe.Pointer(cDepString); return func() { _cgoCheckPointer(_cgo0, nil); /*line :18:42*/_Cfunc_free(_cgo0); }}()()

	pkgList := (* /*line :20:15*/_Ctype_struct__alpm_list_t /*line :20:36*/)(unsafe.Pointer(l.list))
	pkgHandle := (* /*line :21:17*/_Ctype_struct__alpm_handle_t /*line :21:40*/)(unsafe.Pointer(l.handle.ptr))

	ptr := func() *_Ctype_struct__alpm_pkg_t{ _cgo0 := /*line :23:35*/pkgHandle; _cgo1 := /*line :23:46*/pkgList; var _cgo2 *_Ctype_char = /*line :23:55*/cDepString; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :23:66*/_Cfunc_alpm_find_dbs_satisfier(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil,
			fmt.Errorf("unable to satisfy dependency %s in DBlist", depstring)
	}

	return &Package{ptr, l.handle}, nil
}

// FindSatisfier finds a package that satisfies depstring from PkgList
func (l PackageList) FindSatisfier(depstring string) (IPackage, error) {
	cDepString := ( /*line :34:16*/_Cfunc_CString /*line :34:24*/)(depstring)

	defer func() func() { _cgo0 := /*line :36:15*/unsafe.Pointer(cDepString); return func() { _cgoCheckPointer(_cgo0, nil); /*line :36:42*/_Cfunc_free(_cgo0); }}()()

	pkgList := (* /*line :38:15*/_Ctype_struct__alpm_list_t /*line :38:36*/)(unsafe.Pointer(l.list))

	ptr := func() *_Ctype_struct__alpm_pkg_t{ _cgo0 := /*line :40:31*/pkgList; var _cgo1 *_Ctype_char = /*line :40:40*/cDepString; _cgoCheckPointer(_cgo0, nil); return /*line :40:51*/_Cfunc_alpm_find_satisfier(_cgo0, _cgo1); }()
	if ptr == nil {
		return nil,
			fmt.Errorf("unable to find dependency %s in PackageList", depstring)
	}

	return &Package{ptr, l.handle}, nil
}
